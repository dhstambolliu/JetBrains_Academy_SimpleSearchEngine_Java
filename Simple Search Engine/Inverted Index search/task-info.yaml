type: edu
custom_name: stage5
files:
- name: src/search/Main.java
  visible: true
  text: |
    package search;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/SearchEngineTests.java
  visible: false
  text: |
    public class SearchEngineTests {
        public static final String NAMES =
            "Kristofer Galley\n" +
            "Fernando Marbury fernando_marbury@gmail.com\n" +
            "Kristyn Nix nix-kris@gmail.com\n" +
            "Regenia Enderle\n" +
            "Malena Gray\n" +
            "Colette Mattei\n" +
            "Wendolyn Mcphillips\n" +
            "Jim Gray\n" +
            "Coreen Beckham\n" +
            "Bob Yeh bobyeah@gmail.com\n" +
            "Shannan Bob stropeshah@gmail.com\n" +
            "Yer Fillion\n" +
            "Margene Resendez marres@gmail.com\n" +
            "Blossom Ambler\n" +
            "Teri Ledet teri_ledet@gmail.com\n" +
            "Dana Baron baron@gmail.com\n" +
            "Abram Goldsberry\n" +
            "Yer Leopold\n" +
            "Stefania Trunzo\n" +
            "Alexis Leopold\n" +
            "Carlene Bob\n" +
            "Oliver Dacruz\n" +
            "Jonie Richter\n" +
            "Pasquale Gallien gallien@evilcorp.com\n" +
            "Verdie Gentle\n" +
            "Gerardo Strouth gallien@evilcorp.com\n" +
            "Agripina Bob\n" +
            "Latricia Niebuhr\n" +
            "Malena Schommer\n" +
            "Drema Leopold\n" +
            "Heide Payeur\n" +
            "Ranae Digiovanni\n" +
            "Simona Pereira\n" +
            "Nick Digiovanni\n" +
            "Angelita Wigington gallien@evilcorp.com\n" +
            "Elin Gray\n" +
            "Dwain Trunzo\n" +
            "Boris Beiler\n" +
            "Remi Malek fsociefy@gmail.com\n" +
            "Demetria Hostetler gallien@evilcorp.com\n" +
            "Nydia Mcduffie\n" +
            "Florencio Defibaugh\n" +
            "Warner Giblin\n" +
            "Bob Mans\n" +
            "Shu Gray\n" +
            "Kaycee Gray\n" +
            "Victorina Froehlich victory@gmail.com\n" +
            "Roseanne Gray\n" +
            "Erica Radford hisam@gmail.com\n" +
            "Elyse Pauling";
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.*;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        public static final String test1 =
            "2\n" +
            "0";

        public static final String test2 =
            "1\n" +
            "qwerty\n" +
            "0";

        public static final String test3 =
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test4 =
            "3\n" +
            "1\n" +
            "Bob\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test5 =
            "1\n" +
            "@\n" +
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test6 =
            "0";

        public static final String test7 =
            "1\n" +
            "this text never find some match\n" +
            "0";

        public static final String test8 =
            "1\n" +
            "h\n" +
            "1\n" +
            "gallien@evilcorp.com\n" +
            "0";

        public static final String test9 =
            "4\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "this text never gonna be matched\n" +
            "1\n" +
            "h\n" +
            "1\n" +
            "gallien@evilcorp.com\n" +
            "0";

        @Override
        public List<TestCase<TestClue>> generate() {

            List<TestCase<TestClue>> tests = new ArrayList<>();

            for (String input : new String[]{
                test1, test2, test3, test4, test5, test6, test7, test8, test9}) {

                tests.add(new TestCase<TestClue>()
                    .setAttach(new TestClue(input))
                    .setInput(input)
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES));
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;
            String[] currentSearchResult;

            reference = SearchEngineTests.NAMES.split("\n");

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (containsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i).toLowerCase());
                }
            }

            int currentInputLine = 0;
            int currentOutputLine = 0;

            int actionType = -1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        String toSearch = inputLines[currentInputLine].trim().toLowerCase();

                        currentInputLine++;

                        List<String> intendedResult = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            if (s.contains(" " + toSearch + " ")
                                || s.startsWith(toSearch + " ")
                                || s.endsWith(" " + toSearch)) {

                                intendedResult.add(s);
                            }
                        }



                        currentSearchResult = new String[intendedResult.size()];
                        for (int i = 0; i < intendedResult.size(); i++) {
                            try {
                                currentSearchResult[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutput = intendedResult.toArray(String[]::new);

                        Arrays.sort(correctOutput);
                        Arrays.sort(currentSearchResult);

                        if (!Arrays.equals(correctOutput, currentSearchResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }
                        break;
                    case 2:
                        currentInputLine++;

                        List<String> intendedResultAll = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            intendedResultAll.add(s);
                        }

                        String[] userResultAll = new String[intendedResultAll.size()];
                        for (int i = 0; i < intendedResultAll.size(); i++) {
                            try {
                                userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutputAll = intendedResultAll.toArray(String[]::new);

                        Arrays.sort(correctOutputAll);
                        Arrays.sort(userResultAll);

                        if (!Arrays.equals(correctOutputAll, userResultAll)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        private static boolean containsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }

  learner_created: false
- name: src/search/Util.java
  visible: true
  text: |-
    package search;

    import java.util.List;
    import java.util.Scanner;

    public class Util {

        static Scanner scanner = new Scanner(System.in);

        public static String getQueryWord() {
            System.out.println("\nEnter a name or email to search all suitable people.");
            String result = scanner.nextLine();
            System.out.println();
            return result;
        }

        public static void printResult(List<DataModel> storage, List<Integer> resultIndex) {
            if (resultIndex.size() > 0) {
                for (Integer each : resultIndex) {
                    System.out.println(storage.get(each).getDataLine());
                }
            } else {
                System.out.println("No matching data found.");
            }
            System.out.println();
        }

        public static void printResult(List<DataModel> storage) {
            System.out.println("\n=== List of people ===");
            for (DataModel each : storage) {
                System.out.println(each.getDataLine());
            }
        }

        public static int getNumberOfPeople() {
            System.out.println("Enter the number of people:");
            return Integer.parseInt(scanner.nextLine());
        }

    }
  learner_created: true
- name: src/search/DataModel.java
  visible: true
  text: |-
    package search;

    public class DataModel {

        private String dataLine;

        public DataModel() {
        }

        public String getDataLine() {
            return dataLine;
        }

        public void setDataLine(String dataLine) {
            this.dataLine = dataLine;
        }
    }
  learner_created: true
- name: src/search/UserInterface.java
  visible: true
  text: |-
    package search;

    import java.util.Scanner;

    public class UserInterface {

        public Scanner scanner = new Scanner(System.in);
        private final String[] source;

        public UserInterface(String[] source) {
            this.source = source;
        }

        public void start() {
            SearchEngine searchEngine = new SearchEngine();
            searchEngine.initRepository(source);
            int option;
            do {
                option = choiceMainMenu();
                switch (option) {
                    case 1:
                        searchEngine.searchingData();
                        break;
                    case 2:
                        searchEngine.printAllData();
                        break;
                    case 0:
                        System.out.println("Bye!");
                        break;
                }
            } while (option != 0);
        }

        public int choiceMainMenu() {
            int option;
            do {
                System.out.println("=== Menu ===\n" +
                        "1. Find a person\n" +
                        "2. Print all people\n" +
                        "0. Exit");
                option = Integer.parseInt(scanner.nextLine());
                if (option < 0 || option > 2) {
                    System.out.println("Incorrect option! Try again.\n");
                }
            } while (option < 0 || option > 2);
            return option;
        }
    }
  learner_created: true
- name: src/search/SearchEngine.java
  visible: true
  text: |-
    package search;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Locale;
    import java.util.Scanner;

    public class SearchEngine {

        public final String SEPARATOR = " ";
        private final Repository repository = new Repository();

        public void initRepository(String[] source) {
            String fileName = source[1];
            List<DataModel> storage = repository.getStorage();

            File file = new File(fileName);

            try (Scanner fileScanner = new Scanner(file)) {
                while (fileScanner.hasNext()) {
                    DataModel dataModel = new DataModel();
                    dataModel.setDataLine(fileScanner.nextLine());
                    storage.add(dataModel);
                }
            } catch (FileNotFoundException e) {
                System.out.println("No file found: " + fileName);
            }

            repository.setStorage(storage);
            System.out.println();
        }

        public void searchingData() {

            List<DataModel> storage = repository.getStorage();

            String queryWord = Util.getQueryWord();
            List<Integer> resultIndex = new ArrayList<>();
            for (int i = 0; i < storage.size(); i++) {
                DataModel dataModel = storage.get(i);
                if (processSearching(dataModel, queryWord)) {
                    resultIndex.add(i);
                }
            }
            Util.printResult(storage, resultIndex);
        }

        private boolean processSearching(DataModel dataModel, String queryWord) {
            String[] content = dataModel.getDataLine().toLowerCase(Locale.ROOT).split(SEPARATOR);
            for (String each : content) {
                if (each.contains(queryWord.toLowerCase(Locale.ROOT))) {
                    return true;
                }
            }
            return false;
        }

        public void printAllData() {
            List<DataModel> storage = repository.getStorage();
            Util.printResult(storage);
        }
    }
  learner_created: true
- name: src/search/Repository.java
  visible: true
  text: |-
    package search;

    import java.util.ArrayList;
    import java.util.List;

    public class Repository {

        private List<DataModel> storage = new ArrayList<>();

        public Repository() {
        }

        public List<DataModel> getStorage() {
            return storage;
        }

        public void setStorage(List<DataModel> storage) {
            this.storage = storage;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/66/stages/358/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 07 Mar 2022 21:16:07 UTC
record: 5
